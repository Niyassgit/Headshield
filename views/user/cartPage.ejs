<%- include("../../views/partials/user/header") %>
<style> 
    .breadcrumb {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 4px;
      padding: 0;
      margin: 0;
      list-style: none;
  }
  
  .breadcrumb-item {
      font-size: 12px; 
      color: #666;
  }
  
  .breadcrumb-item a {
      color: #333;
      text-decoration: none;
  }
  
  .breadcrumb-item a:hover {
      text-decoration: underline;
  }
  
  .breadcrumb-item:not(:last-child)::after {
      content: "/";
      margin-left: 4px;  
  }
  
  .breadcrumb-item.active {
      color: #999;
  }
  
  .breadcrumb-item i {
      font-size: 11px;  
      margin-right: 3px;  
  }
  </style> 


<nav aria-label="breadcrumb" >
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/"><i class="fas fa-home"></i> Home</a>
        </li>
        <li class="breadcrumb-item">
            <a href="/shop"><i class="fas fa-home"></i> shop</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">
            <i class="fas  fa-shopping-cart"></i> Shopping Cart
        </li>
    </ol>
  </nav>

<div class="container my-5">
    <!-- Heading Row -->
    <div class="d-flex justify-content-between align-items-center border-bottom pb-3">
        <h2>Your Cart</h2>
        <a href="/shop" class="btn btn-outline-black" style="color:#59ab6e; border-color: #59ab6e;">Continue Shopping</a>
    </div>

    <!-- Cart Layout -->
    <div class="row mt-4">
        <!-- Left Side: Cart Items -->
        <div class="col-lg-8" id="cart-items-container">
            <% if (cart.items.length > 0) { %>
                <% cart.items.forEach(item => { %>
                    <div class="cart-item d-flex justify-content-between align-items-center mb-4 border-bottom pb-4" data-product-id="<%= item.productId._id %>">
                        <div class="cart-item-info d-flex align-items-center">
                            <img src="/uploads/re-image/<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName %>" width="100" class="me-3">
                            <div>
                                <h5><%= item.productId.productName %></h5>
                                <p>Price: ₹<span class="item-price"><%= item.productId.salePrice %></span></p>
                                <div class="quantity-controls d-flex align-items-center">
                                    <button class="btn btn-sm btn-outline-secondary minus-btn" data-product-id="<%= item.productId._id %>">-</button>
                                    <span class="quantity-display mx-3"><%= item.quantity %></span>
                                    <button class="btn btn-sm btn-outline-secondary plus-btn" data-product-id="<%= item.productId._id %>">+</button>
                                </div>
                            </div>
                        </div>
                        <button class="btn btn-danger remove-item-btn" data-product-id="<%= item.productId._id %>">Remove</button>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="empty-cart text-center">
                    <h5>Your shopping cart is empty.</h5>
                    <p>Browse our products and add items to your cart.</p>
                </div>
            <% } %>
        </div>
        <!-- Right Side: Cart Summary -->
        <div class="col-lg-4">
            <div class="cart-summary p-4 rounded shadow-sm" style="background: rgba(0, 0, 0, 0.05);">
                <h4 class="fw-bold mb-3 text-dark text-center">Cart Summary</h4>
                
                <div class="border-bottom pb-3">
                    <p class="d-flex justify-content-between fs-6 text-dark">
                        <span>Total:</span> 
                        <strong>₹<span id="cart-total"><%= cart.cartRegularTotal %></span></strong>
                    </p>
                    <p class="d-flex justify-content-between fs-6 text-success">
                        <span>You Have Saved:</span> 
                        <strong>- ₹<span id="cart-saved"><%= cart.cartRegularTotal - cart.cartTotal %></span></strong>
                    </p>                    
                    <p class="d-flex justify-content-between fs-5 fw-bold text-dark">
                        <span>Sub Total:</span> 
                        <strong>₹<span id="cart-subtotal"><%= cart.cartTotal %></span></strong>
                    </p>
                </div>
        
                <% if(cart.items.length != 0){ %>
                    <a href="/checkoutPage" class="btn btn-success w-100 mt-4 py-2 rounded-pill fw-bold">
                        Proceed to Checkout <i class="fas fa-arrow-right"></i>
                    </a>
                <% } %>
            </div>
        </div>
        
    </div>
</div> 

<!-- Toastify CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<!-- Toastify JS -->
<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
 document.addEventListener("DOMContentLoaded", function() {
    const removeButtons = document.querySelectorAll(".remove-item-btn");
    const plusButtons = document.querySelectorAll(".plus-btn");
    const minusButtons = document.querySelectorAll(".minus-btn");

    function updateCartDisplay(data) {
        // Update total
        document.getElementById("cart-total").textContent = data.cartRegularTotal.toFixed(2);
        
        // Update saved amount
        const savedAmount = data.cartRegularTotal - data.cartTotal;
        document.getElementById("cart-saved").textContent = `${savedAmount.toFixed(2)}`;
        
        // Update subtotal
        document.getElementById("cart-subtotal").textContent = data.cartTotal.toFixed(2);
    }

    removeButtons.forEach(button => {
        button.addEventListener("click", function() {
            const productId = this.getAttribute("data-product-id");

            // SweetAlert2 Confirmation
            Swal.fire({
                title: "Are you sure?",
                text: "Do you really want to remove this item from your cart?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, remove it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    deleteCartItem(productId);
                }
            });
        });
    });

    function deleteCartItem(productId) {
        fetch("/cart/deleteItem", {
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ productId: productId }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Remove the cart item from DOM
                const cartItem = document.querySelector(`[data-product-id="${productId}"]`);
                if (cartItem) {
                    cartItem.remove();
                }

                // Update cart display
                updateCartDisplay(data);

                // If no items left, show empty cart message
                if (data.remainingItems === 0) {
                    const cartItemsContainer = document.getElementById("cart-items-container");
                    cartItemsContainer.innerHTML = `
                        <div class="empty-cart text-center">
                            <h5>Your shopping cart is empty.</h5>
                            <p>Browse our products and add items to your cart.</p>
                        </div>
                    `;
                }

                // SweetAlert2 Success Message
                Swal.fire({
                    title: "Deleted!",
                    text: "The item has been removed from your cart.",
                    icon: "success",
                    timer: 2000,
                    showConfirmButton: false
                });
                updateCounts(); 

            } else {
                Swal.fire({
                    title: "Error!",
                    text: data.message,
                    icon: "error"
                });
            }
        })
        .catch(error => {
            console.error("Error:", error);
            Swal.fire({
                title: "Error!",
                text: "Something went wrong. Please try again later.",
                icon: "error"
            });
        });
    }


    function updateQuantity(productId, change) {
        const quantityDisplay = document.querySelector(`.cart-item[data-product-id="${productId}"] .quantity-display`);
        const currentQuantity = parseInt(quantityDisplay.textContent);
        const newQuantity = currentQuantity + change;

        fetch("/cart/updateQuantity", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ 
                productId: productId,
                quantity: change 
            }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                quantityDisplay.textContent = newQuantity;

                updateCartDisplay(data);

                Toastify({
                    text: "Cart updated successfully",
                    duration: 3000,
                    backgroundColor: "green",
                    close: true
                }).showToast();
                updateCounts(); 

            } else {
                Toastify({
                    text: data.message,
                    duration: 3000,
                    backgroundColor: "red",
                    close: true
                }).showToast();
            }
        })
        .catch(error => {
            console.error("Error:", error);
            Toastify({
                text: "Something went wrong. Please try again later.",
                duration: 3000,
                backgroundColor: "red",
                close: true
            }).showToast();
        });
    }

    plusButtons.forEach(button => {
        button.addEventListener("click", function() {
            const productId = this.getAttribute("data-product-id");
            updateQuantity(productId, 1);
        });
    });

    minusButtons.forEach(button => {
        button.addEventListener("click", function() {
            const productId = this.getAttribute("data-product-id");
            updateQuantity(productId, -1);
        });
    });
});


       
</script>


<%- include("../../views/partials/user/footer") %>